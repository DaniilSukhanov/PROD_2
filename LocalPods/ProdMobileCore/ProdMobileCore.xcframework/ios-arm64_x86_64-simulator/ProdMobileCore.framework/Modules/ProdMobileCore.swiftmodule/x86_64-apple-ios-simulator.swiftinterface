// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ProdMobileCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import ProdMobileCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
final public class ImageFactory : ProdMobileCore.IImageFactory {
  public init()
  final public func offerImage(id: Swift.String) -> UIKit.UIImage
  final public func bannerImage(id: Swift.String) -> UIKit.UIImage
  @objc deinit
}
public protocol IImageFactory {
  func offerImage(id: Swift.String) -> UIKit.UIImage
  func bannerImage(id: Swift.String) -> UIKit.UIImage
}
extension UIKit.UIColor {
  convenience public init?(hexString: Swift.String)
  convenience public init(hex: Swift.UInt64)
}
extension Swift.UInt64 {
  public init?(hexString: Swift.String)
}
public protocol IPersistenceStorage {
  func save<Model>(_ item: Model) where Model : ProdMobileCore.Identifiable
  func fetch<Model>(_ itemType: Model.Type) -> [Model] where Model : ProdMobileCore.Identifiable
  func delete<Model>(_ item: Model) where Model : ProdMobileCore.Identifiable
}
public protocol Identifiable {
  var identifier: Swift.String { get }
}
final public class NetworkingService : ProdMobileCore.INetworkingService {
  public init()
  final public func load(request: ProdMobileCore.IRequest, _ completion: @escaping (Swift.Result<Foundation.Data, Swift.Error>) -> ())
  @objc deinit
}
public enum NetworkingError : Swift.Error {
  case notFound
  case invalidRequest
  public static func == (a: ProdMobileCore.NetworkingError, b: ProdMobileCore.NetworkingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IRequest {
  var baseUrl: Swift.String { get }
  var methodPath: Swift.String { get }
  var queryParams: [Swift.String : Swift.String] { get }
}
public protocol INetworkingService {
  func load(request: ProdMobileCore.IRequest, _ completion: @escaping (_ json: Swift.Result<Foundation.Data, Swift.Error>) -> ())
}
final public class PersistenceStorage : ProdMobileCore.IPersistenceStorage {
  public init()
  final public func save<Model>(_ item: Model) where Model : ProdMobileCore.Identifiable
  final public func fetch<Model>(_ itemType: Model.Type) -> [Model] where Model : ProdMobileCore.Identifiable
  final public func delete<Model>(_ item: Model) where Model : ProdMobileCore.Identifiable
  @objc deinit
}
final public class AnalyticsService : ProdMobileCore.IAnalyticsService {
  public init()
  final public func send(event: ProdMobileCore.AnalyticsEvent)
  @objc deinit
}
public struct AnalyticsEvent {
  public let name: Swift.String
  public let elementId: Swift.String
  public let elementValue: Swift.String
  public init(name: Swift.String, elementId: Swift.String, elementValue: Swift.String)
}
public protocol IAnalyticsService {
  func send(event: ProdMobileCore.AnalyticsEvent)
}
extension ProdMobileCore.NetworkingError : Swift.Equatable {}
extension ProdMobileCore.NetworkingError : Swift.Hashable {}
